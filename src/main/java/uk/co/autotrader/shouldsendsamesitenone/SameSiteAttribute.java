/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.co.autotrader.shouldsendsamesitenone;

import nl.basjes.parse.useragent.UserAgent;
import nl.basjes.parse.useragent.UserAgentAnalyzer;

public class SameSiteAttribute {

    private static final int EQUAL = 0;
    UserAgentAnalyzer userAgentAnalyzer;

    public SameSiteAttribute() {
        userAgentAnalyzer = UserAgentAnalyzer
                .newBuilder()
                .hideMatcherLoadStats()
                .withCache(10000)
                .build();
    }

    /**
     * Checks to see if the current user agent requires SameSite=None cookie attribute set.
     * @param u
     * @return
     */
    public boolean shouldSetSameSiteNone(String u) {
        if(u == null || u.isEmpty()) {
            return true;
        } else {
            UserAgent.ImmutableUserAgent userAgent = userAgentAnalyzer.parse(u);
            return !sameSiteNonIncompatible(userAgent);
        }
    }

    private boolean sameSiteNonIncompatible(UserAgent userAgent) {
        return hasWebKitSameSiteBug(userAgent) || dropsUnrecognizedSameSiteCookies(userAgent);
    }

    private boolean dropsUnrecognizedSameSiteCookies(UserAgent userAgent) {
        return (
                (isChromiumBased(userAgent) &&
                        isAgentSemverVersionAtLeast(new Version("51"), userAgent) &&
                        !isAgentSemverVersionAtLeast(new Version("67"), userAgent)) ||
                        (isUcBrowser(userAgent) && !isAgentSemverVersionAtLeast(new Version("12.13.2"), userAgent))
        );
    }

    private boolean isUcBrowser(UserAgent userAgent) {
        return userAgent.getValue(UserAgent.AGENT_NAME).equals("UCBrowser");
    }

    private boolean isAgentSemverVersionAtLeast(Version minVersion, UserAgent userAgent) {
        String version = userAgent.getValue(UserAgent.AGENT_VERSION);
        Version v = new Version(version);
        return v.compareTo(minVersion) >= 0;
    }

    private boolean isChromiumBased(UserAgent userAgent) {
        return userAgent.getValue(UserAgent.AGENT_NAME).equals("Chrome")
                || userAgent.getValue(UserAgent.AGENT_NAME).equals("Chromium")
                || userAgent.getValue(UserAgent.AGENT_NAME).equals("Chrome Webview");
    }

    private boolean hasWebKitSameSiteBug(UserAgent userAgent) {
        return isIosVersion(new Version("12"), userAgent) ||
                                (isMacosxVersion(new Version("10.14"), userAgent) &&
                                (isSafari(userAgent) || isMacEmbeddedBrowser(userAgent)));
    }

    private boolean isMacEmbeddedBrowser(UserAgent userAgent) {
        boolean isMacOSX = userAgent.getValue(UserAgent.OPERATING_SYSTEM_NAME).equals("Mac OS X");
        boolean isAppleWebKit = userAgent.getValue(UserAgent.AGENT_NAME).equals("AppleWebKit");
        boolean isBrowser = userAgent.getValue(UserAgent.AGENT_CLASS).equals("Browser");
        return  isMacOSX && isAppleWebKit && isBrowser;
//        return userAgent.getUserAgentString().matches("/^Mozilla\\/[\\.\\d]+ \\(Macintosh;.*Mac OS X [_\\d]+\\) AppleWebKit\\/[\\.\\d]+ \\(KHTML, like Gecko\\)$/");
    }

    private boolean isSafari(UserAgent userAgent) {
        return userAgent.getValue(UserAgent.AGENT_NAME).equals("Safari");
    }

    private boolean isMacosxVersion(Version v, UserAgent userAgent) {
        String os = userAgent.getValue(UserAgent.OPERATING_SYSTEM_NAME);
        String version = userAgent.getValue(UserAgent.OPERATING_SYSTEM_VERSION);
        return os.equals("Mac OS X")
                && v.compareTo(new Version(version)) == 0;
    }

    private boolean isIosVersion(Version v, UserAgent userAgent) {
        String os = userAgent.getValue(UserAgent.OPERATING_SYSTEM_NAME);
        String version = userAgent.getValue(UserAgent.OPERATING_SYSTEM_VERSION);
        return os.equals("iOS")
                && v.compareTo(new Version(version)) == EQUAL;
    }

}
