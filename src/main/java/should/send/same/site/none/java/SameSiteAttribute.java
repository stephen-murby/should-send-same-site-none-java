/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package should.send.same.site.none.java;

import nl.basjes.parse.useragent.UserAgent;
import nl.basjes.parse.useragent.UserAgentAnalyzer;

public class SameSiteAttribute {

    private static final int EQUAL = 0;
    UserAgentAnalyzer userAgentAnalyzer;

    public SameSiteAttribute() {
        userAgentAnalyzer = UserAgentAnalyzer
                .newBuilder()
                .hideMatcherLoadStats()
                .withCache(10000)
                .build();
    }

    public boolean shouldSetSameSiteNone(String strUserAgent) {
        if(strUserAgent == null || strUserAgent.isEmpty()) {
            return true;
        } else {
            UserAgent.ImmutableUserAgent userAgent = userAgentAnalyzer.parse(strUserAgent);
            return !sameSiteNonIncompatible(userAgent);
        }
    }

    private boolean sameSiteNonIncompatible(UserAgent userAgent) {
        return hasWebKitSameSiteBug(userAgent) || dropsUnrecognizedSameSiteCookies(userAgent);
    }

    private boolean dropsUnrecognizedSameSiteCookies(UserAgent userAgent) {
        return (
                (isChromiumBased(userAgent) &&
                        isAgentSemverVersionAtLeast(new Version("51"), userAgent) &&
                        !isAgentSemverVersionAtLeast(new Version("67"), userAgent)) ||
                        (isUcBrowser(userAgent) && !isAgentSemverVersionAtLeast(new Version("12.13.2"), userAgent))
        );
    }

    private boolean isUcBrowser(UserAgent userAgent) {
        return userAgent.getValue(UserAgent.AGENT_NAME).equals("UCBrowser");
    }

    private boolean isAgentSemverVersionAtLeast(Version minVersion, UserAgent userAgent) {
        String version = userAgent.getValue(UserAgent.AGENT_VERSION);
        Version v = new Version(version);
        return v.compareTo(minVersion) >= 0;
    }

    private boolean isChromiumBased(UserAgent userAgent) {
        return userAgent.getValue(UserAgent.AGENT_NAME).equals("Chrome")
                || userAgent.getValue(UserAgent.AGENT_NAME).equals("Chromium")
                || userAgent.getValue(UserAgent.AGENT_NAME).equals("Chrome Webview");
    }

    private boolean hasWebKitSameSiteBug(UserAgent userAgent) {
        return isIosVersion(new Version("12"), userAgent) ||
                                (isMacosxVersion(new Version("10.14"), userAgent) &&
                                (isSafari(userAgent) || isMacEmbeddedBrowser(userAgent)));
    }

    private boolean isMacEmbeddedBrowser(UserAgent userAgent) {
        boolean isMacOSX = userAgent.getValue(UserAgent.OPERATING_SYSTEM_NAME).equals("Mac OS X");
        boolean isAppleWebKit = userAgent.getValue(UserAgent.AGENT_NAME).equals("AppleWebKit");
        boolean isBrowser = userAgent.getValue(UserAgent.AGENT_CLASS).equals("Browser");
        return  isMacOSX && isAppleWebKit && isBrowser;
//        return userAgent.getUserAgentString().matches("/^Mozilla\\/[\\.\\d]+ \\(Macintosh;.*Mac OS X [_\\d]+\\) AppleWebKit\\/[\\.\\d]+ \\(KHTML, like Gecko\\)$/");
    }

    private boolean isSafari(UserAgent userAgent) {
        return userAgent.getValue(UserAgent.AGENT_NAME).equals("Safari");
    }

    private boolean isMacosxVersion(Version v, UserAgent userAgent) {
        String os = userAgent.getValue(UserAgent.OPERATING_SYSTEM_NAME);
        String version = userAgent.getValue(UserAgent.OPERATING_SYSTEM_VERSION);
        return os.equals("Mac OS X")
                && v.compareTo(new Version(version)) == 0;
    }

    private boolean isIosVersion(Version v, UserAgent userAgent) {
        String os = userAgent.getValue(UserAgent.OPERATING_SYSTEM_NAME);
        String version = userAgent.getValue(UserAgent.OPERATING_SYSTEM_VERSION);
        return os.equals("iOS")
                && v.compareTo(new Version(version)) == EQUAL;
    }

    /*
    function intToString(intValue) {
  return String(intValue);
}

function stringToInt(strValue) {
  return parseInt(strValue, 10) || 0;
}

// Donâ€™t send `SameSite=None` to known incompatible clients.
function isSameSiteNoneCompatible(useragent) {
  return !isSameSiteNoneIncompatible(String(useragent));
}

// Classes of browsers known to be incompatible.
function isSameSiteNoneIncompatible(useragent) {
  return (
    hasWebKitSameSiteBug(useragent) ||
    dropsUnrecognizedSameSiteCookies(useragent)
  );
}

function hasWebKitSameSiteBug(useragent) {
  return (
    isIosVersion(12, useragent) ||
    (isMacosxVersion(10, 14, useragent) &&
      (isSafari(useragent) || isMacEmbeddedBrowser(useragent)))
  );
}

function dropsUnrecognizedSameSiteCookies(useragent) {
  return (
    (isChromiumBased(useragent) &&
      isChromiumVersionAtLeast(51, useragent) &&
      !isChromiumVersionAtLeast(67, useragent)) ||
    (isUcBrowser(useragent) && !isUcBrowserVersionAtLeast(12, 13, 2, useragent))
  );
}

// Regex parsing of User-Agent string.
function regexContains(stringValue, regex) {
  var matches = stringValue.match(regex);
  return matches !== null;
}

function extractRegexMatch(stringValue, regex, offsetIndex) {
  var matches = stringValue.match(regex);

  if (matches !== null && matches[offsetIndex] !== undefined) {
    return matches[offsetIndex];
  }

  return null;
}

function isIosVersion(major, useragent) {
  var regex = /\(iP.+; CPU .*OS (\d+)[_\d]*.*\) AppleWebKit\//;
  // Extract digits from first capturing group.
  return extractRegexMatch(useragent, regex, 1) === intToString(major);
}

function isMacosxVersion(major, minor, useragent) {
  var regex = /\(Macintosh;.*Mac OS X (\d+)_(\d+)[_\d]*.*\) AppleWebKit\//;
  // Extract digits from first and second capturing groups.
  return (
    extractRegexMatch(useragent, regex, 1) === intToString(major) &&
    extractRegexMatch(useragent, regex, 2) === intToString(minor)
  );
}

function isSafari(useragent) {
  var safari_regex = /Version\/.* Safari\//;
  return useragent.match(safari_regex) !== null && !isChromiumBased(useragent);
}

function isMacEmbeddedBrowser(useragent) {
  var regex = /^Mozilla\/[\.\d]+ \(Macintosh;.*Mac OS X [_\d]+\) AppleWebKit\/[\.\d]+ \(KHTML, like Gecko\)$/;

  return regexContains(useragent, regex);
}

function isChromiumBased(useragent) {
  const regex = /Chrom(e|ium)/;
  return regexContains(useragent, regex);
}

function isChromiumVersionAtLeast(major, useragent) {
  var regex = /Chrom[^ \/]+\/(\d+)[\.\d]* /;
  // Extract digits from first capturing group.
  var version = stringToInt(extractRegexMatch(useragent, regex, 1));
  return version >= major;
}

function isUcBrowser(useragent) {
  var regex = /UCBrowser\//;
  return regexContains(useragent, regex);
}

function isUcBrowserVersionAtLeast(major, minor, build, useragent) {
  var regex = /UCBrowser\/(\d+)\.(\d+)\.(\d+)[\.\d]* /;
  // Extract digits from three capturing groups.
  var major_version = stringToInt(extractRegexMatch(useragent, regex, 1));
  var minor_version = stringToInt(extractRegexMatch(useragent, regex, 2));
  var build_version = stringToInt(extractRegexMatch(useragent, regex, 3));
  if (major_version !== major) {
    return major_version > major;
  }
  if (minor_version != minor) {
    return minor_version > minor;
  }

  return build_version >= build;
}
     */
}
